<?php

namespace SUH\GestionBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EtudiantHandicapRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EtudiantHandicapeRepository extends EntityRepository
{
    /**
     * retourne l'étudiant en fonction de son id étudiant handicapé
     * @param Integer $idEtuHandicape
     * @return Etudiant
     */

    public function getStudentConcerned($idEtuHandicape)
    {
        return $this->_em->createQueryBuilder()
        ->select('e')
        ->from('SUH\GestionBundle\Entity\Etudiant','e')
        ->join('e.listEtudiantHandicape', 'lei')
        ->where('lei.etudiantHandicape = :id')
        ->setParameter('id',$idEtuHandicape)
        ->getQuery()
        ->getSingleResult();
    }
        
    /**
     * retourne toutes les informations relatives à un étudiant handicapé identifié par son id
     * (utilisé pour l'affichage d'un étudiant)
     * @param Integer $id
     */
    
    public function getInformationsStudent($id,$annee)
    {

        $qb = $this->_em->createQueryBuilder()
                ->select('ein, eeh')                
                ->from('SUH\GestionBundle\Entity\EtudiantEtudiantInformations','ein')
                ->from('SUH\GestionBundle\Entity\EtudiantEtudiantHandicape','eeh')
                ->join('ein.etudiant','e')
                ->join('ein.etudiantInformations', 'eInfos')
                ->join('e.listEtudiantHandicape','leh')
                ->join('leh.etudiantHandicape','handicap')
                ->where('ein.anneeScolaire = :annee')
                ->andWhere('leh.etudiantHandicape = :id')
                ->andWhere('eeh.etudiantHandicape = :id')
                ->andWhere('eeh.anneeScolaire = :annee')
                ->setParameter('id', $id)
                ->setParameter('annee', $annee);   

        return $qb->getQuery()->getResult();
    }

    /**
     * On retourne toutes ses informations en fonction de son ID, l'année scolaire et s'il possède une ou plusieurs formations
     * Utilisé lors de la modification d'un étudiant
     * @param Integer $id
     * @param String $annee
     * @param Boolean $formationIsset
     */

    public function getModifInformationsStudent($id,$annee,$formationIsset)
    {      
        $qb = $this->_em->createQueryBuilder()
                ->select('e', 'lei', 'ei')                
                ->from('SUH\GestionBundle\Entity\Etudiant','e')
                ->join('e.listEtudiantInformations','lei')
                ->join('lei.etudiantInformations', 'ei')
                ->join('e.listEtudiantHandicape','leh')
                ->join('leh.etudiantHandicape','eh')
                ->where('e.id = :id')
                ->andWhere('leh.anneeScolaire = :annee')
                ->andWhere('lei.anneeScolaire = :annee')
                ->setParameter('id', $id)
                ->setParameter('annee', $annee);
        /* Si l'on ne fait pas cette condition et que l'étudiant ne possède pas de formation, il ne sera pas retourné */
        if($formationIsset)
        {
            $qb->join('e.listEtudiantFormation','lef')
            ->join('lef.formation','f')
            ->andWhere('lef.anneeScolaire = :annee');
        }
        
        return $qb->getQuery()->getSingleResult();        
    }

    /**
     * On retourne les dernières informations de l'étudiant
     * Utilisé lors de la réinscription
     * @param Integer $id
     */
    
    public function getLastsInformationsStudent($id)
    {
        $qb = $this->_em->createQueryBuilder()
                ->select('e',  'lei', 'ei')                
                ->from('SUH\GestionBundle\Entity\Etudiant','e')
                ->join('e.listEtudiantInformations','lei')
                ->join('lei.etudiantInformations', 'ei')
                ->where('e.id = :id')
                ->setParameter('id', $id);

        return $qb->getQuery()->getSingleResult();
    } 
}
