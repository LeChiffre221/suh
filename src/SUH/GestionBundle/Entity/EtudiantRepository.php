<?php

use SUH\GestionBundle\Entity\EtudiantEtudiantInformations;
namespace SUH\GestionBundle\Entity;

/**
 * EtudiantRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EtudiantRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Retourne tous les étudiants de la base de données pour une année précise
     * @param String $year
     */

    public function getAllStudentsByYear($annee)
    {
        return $this->_em->createQueryBuilder()
                ->select('e')
                ->from($this->_entityName,'e')
                ->join('e.listEtudiantHandicape','leh')
                ->join('e.listEtudiantInformations','lei')
                ->andWhere('lei.anneeScolaire = :annee')
                ->andWhere('leh.anneeScolaire = :annee')
                ->setParameter('annee', $annee)
                ->getQuery()
                ->getResult();    
    } 

    /**
     * Retourne l'étudiant handicapé pour une année précise et un ID étudiant
     * @param Integer $id
     * @param String $year
     */

    public function getHandicapStudentThisYear($id, $year)
    {
        return $this->_em->createQueryBuilder()
            ->select('eHandicape.id')
            ->from('SUH\GestionBundle\Entity\Etudiant','e')
            ->join('e.listEtudiantHandicape','leh')
            ->join('leh.etudiantHandicape','eHandicape')
            ->where('e.id = :id')
            ->andWhere('leh.anneeScolaire = :year')
            ->setParameter('id',$id)
            ->setParameter('year',$year)
            ->getQuery()
            ->getResult();
    }

    /**
     * Retourne tous les étudiants pouvant être réinscrits l'année suivante
     * @param String $year
     */

    public function getStudentsReinscription($year)
    {
        $registerThisYear = $this->_em->createQueryBuilder()
        ->select('e.id')
        ->from('SUH\GestionBundle\Entity\Etudiant','e')
        ->join('e.listEtudiantInformations','lei')
        ->where('lei.anneeScolaire = :year')
        ->setParameter('year', $year)
        ->getQuery()
        ->getResult();

        $e = $this->_em->createQueryBuilder()
        ->select('e, lei, ein')
        ->from('SUH\GestionBundle\Entity\Etudiant','e')
        ->join('e.listEtudiantInformations','lei')
        ->join('lei.etudiantInformations','ein')
        ->where('lei.anneeScolaire < :year')
        ->setParameter('year', $year);
        if(!empty($registerThisYear))
        {
            $e->andWhere('e.id NOT IN (:registerThisYear)')
            ->setParameter('registerThisYear', $registerThisYear);
        }
               
        return $e->getQuery()->getArrayResult();        
    }

    /**
     * Retourne l'étudiant en fonction d'un id étudiant handicapé
     * @param Integer $id
     */

    public function getStudentByStudentHandicapId($id)
    {
        $e = $this->_em->createQueryBuilder()
        ->select('etu.id')
        ->from('SUH\GestionBundle\Entity\Etudiant','etu')
        ->join('etu.listEtudiantHandicape','leh')
        ->where('leh.etudiantHandicape = :id')
        ->setParameter('id', $id)
        ->getQuery()
        ->getResult();

        return $e;
    }

    /**
     * Retourne les informations de l'étudiant de l'année en cours
     * @param Integer $id
     * @param String $annee
     */

    public function getStudentInformationsByYear($id, $annee)
    {
        return $this->_em->createQueryBuilder()
        ->select('ei.id','ei.nom','ei.prenom','ei.mailInstitutionnel','ei.mailPerso')
        ->from('SUH\GestionBundle\Entity\Etudiant','e')
        ->join('e.listEtudiantInformations','lei')
        ->join('lei.etudiantInformations','ei')
        ->addSelect('ei.nom')
        ->where('e.id = :id')
        ->andWhere('lei.anneeScolaire = :annee')
        ->setParameter('id',$id)
        ->setParameter('annee',$annee)
        ->getQuery()
        ->getResult();
    }

    /**
     * Retourne l'étudiant en fonction d'un id d'informations étudiant 
     * @param Integer $idStudentInformations
     */

    public function getStudentByStudentInformationsId($idStudentInformations)
    {
        return $this->_em->createQueryBuilder()
        ->select('e')
        ->from('SUH\GestionBundle\Entity\Etudiant','e')
        ->join('e.listEtudiantInformations','lei')
        ->join('lei.etudiantInformations','ei')
        ->where('ei.id = :id')
        ->setParameter('id',$idStudentInformations)
        ->getQuery()
        ->getResult();
    }

    /**
     * retourne tous les id (handicapé), noms, prénoms et mails (utilisé pour la diffusion) des étudiants de la BDD 
     * Utilisé pour l'affichage de la liste
     * @param String $annee
     */
    public function getAllIdNameSurname($annee)
    {
        $e =  $this->_em->createQueryBuilder()

    		->select('handicapId.id','eInfos.nom','eInfos.prenom', 'eInfos.mailInstitutionnel', 'eInfos.mailPerso')
            ->from('SUH\GestionBundle\Entity\EtudiantEtudiantInformations','ein')
            ->join('ein.etudiant','e')
            ->join('ein.etudiantInformations', 'eInfos')
            ->join('e.listEtudiantHandicape','leh')
            ->join('leh.etudiantHandicape','handicapId')
            ->where('ein.anneeScolaire = :annee')
            ->andWhere('leh.anneeScolaire = :annee')
            ->orderBy('eInfos.nom')
            ->addOrderBy('eInfos.prenom')
            ->setParameter('annee',$annee)
            ->getQuery()
            ->getResult();

        return $e;

    }
    
    /**
     * Récupère la liste des étudiants par nom ou prenom
     * (utilisé lors de la recherche rapide)
     * @param type $chaine
     * @return type
     */
    public function getListeEtudiantsParNomOuPrenom($chaine,$annee)
    {
        return $this->_em->createQueryBuilder()
                ->select('eHandicap.id', 'ein.nom', 'ein.prenom', 'ein.mailInstitutionnel', 'ein.mailPerso')
                ->from($this->_entityName,'e')
                ->join('e.listEtudiantHandicape','leh')
                ->join('e.listEtudiantInformations','lei')
                ->join('leh.etudiantHandicape','eHandicap')
                ->join('lei.etudiantInformations','ein')
                ->where('ein.nom LIKE :nom')
                ->orWhere('ein.prenom LIKE :prenom')
                ->andWhere('lei.anneeScolaire = :annee')
                ->andWhere('leh.anneeScolaire = :annee')
                ->setParameter('nom', '%'.$chaine.'%')
                ->setParameter('prenom', '%'.$chaine.'%')
                ->setParameter('annee', $annee)
                ->orderBy('ein.nom')
                ->addOrderBy('ein.prenom')
                ->getQuery()
                ->getResult();    
    }    
}